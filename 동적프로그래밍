다이나믹프로그래밍(동적계획법)
1. 어떤 문제의 답을 구해야 할 때, 문제를 더 이상 쪼갤 수 없는 단위까지 쪼갠 후 작은 문제의 답을 누적해 나가는(Memoization) 방식
** Memoization : 동일한 계산을 반복해야 할 때 계산결과를 메모리에 저장해 두었다 꺼내써서 중복계산을 방지하는 방법, 시간 비용을 줄이고 공간비용을 늘림.
2. 핵심요소 두가지 : 초기조건, 점화식
3. 초기조건이란 더 이상 쪼갤 수 없는 시작점, 문제에서 주어지거나 프로그래머가 스스로 추정해야 함
4. 점화식이란 문제의 답을 구하는 연산

피보나치 수열 - 0과 1로 시작해서 다음 피보나치 수는 앞의 두 수의 합이 됨.
초기조건 - 0과 1
점화식 - 앞의 두수의 합

Top-down - 큰 문제부터 시작해서 작은 문제로 분할해 가는 것 ex)재귀함수, 동적계획법을 사용한 피보나치
Bottom-up - 작은 문제부터 해결하고 다음문제로 넘어가는 것 ex)for문을 사용한 피보나치

재귀와의 차이점 - 값을 외부에 누적하는 동적계획법과 달리 재귀함수는 값이 커질수록 불필요한 연산이 많음
분할정복과의 차이점 - 나누어진 부분문제들이 분할정복은 독립적이라면 동적프로그래밍은 의존적, 그리고 계산한 값을 캐시에 저장(memoization)해두고 여러번 사용하므로 불필요하게 중복되는 연산이 없음.
