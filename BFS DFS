BFS(Breadth First Search), 너비 우선 탐색
한 레벨씩 올라가면서 같은 레벨의 노드들을 먼저 순회하는 방식, 한 레벨의 노드를 모두 탐색하면 다음레벨 노드 탐색함, 큐 사용

DFS(Depth First Search) 깊이 우선 탐색
그래프에서 한노드의 자식을 타고 한길만 따라 끝까지 순회한 후에 다른 형제노드를 타고 순회하는 방식, 스택 사용


graph = {
    'A': ['B'],
    'B': ['A', 'C', 'H'],
    'C': ['B', 'D'],
    'D': ['C', 'E', 'G'],
    'E': ['D', 'F'],
    'F': ['E'],
    'G': ['D'],
    'H': ['B', 'I', 'J', 'M'],
    'I': ['H'],
    'J': ['H', 'K'],
    'K': ['J', 'L'],
    'L': ['K'],
    'M': ['H'] 
}   
    
def bfs(graph, start_node):
    queue = [] # 큐 라이브러리를 사용하는 게 더 효율이 좋음
    visit = [] 
                       
    queue.append(start_node)
    
    while queue:
        node = queue.pop(0)
        if node not in visit:
            visit.append(node)
            queue.extend(graph[node])
    
    return visit
    
def dfs(graph, start_node):
    stack = []
    visit = [] 
                       
    stack.append(start_node)
    
    while stack:
        node = stack.pop()
        if node not in visit:
            visit.append(node)
            stack.extend(graph[node])
    
    return visit



백준 1260
DFS
1. 함수 매개변수 current_node(int), row(list), foot_prints(list)
2. foot_prints에 current_node 넣음
3. row[current_node]의 개수만큼 for문 돌림
4. row[current_node][search_node]가 0이 아니고 search_node가 foot_print에 없을 때 
dfs(search_node, row, foot_prints로 재귀적으로 실행
5. foot_prints 리턴

BFS
1. 함수 매개변수 start(int)
2. queue, foot_prints 리스트 선언하고 start 넣음
3. queue가 빌때가지 while 루프반복
4. queue.pop으로 current_node 변수 선언
5. row[current_node]의 개수만큼 for문 돌림
6. row[current_node][search_node]가 0이 아니고 search_node가 foot_prints에 없을 때 
foot_prints와 queue에 search_node 추가
7. foot_prints 리턴

차이점 : DFS는 인접행렬에서 인접한 노드를 발견하면 그 노드를 인수로 함수를 재귀적으로 실행함. BFS는 인접한 노드를 발견하면 리스트에 넣고 계속해서 실행함.
